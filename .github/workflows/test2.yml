name: Test2

on:
  push:
    branches: 'v[0-9].[0-9]*'
        #1.The pipeline should be triggered whenever this is a push to a branch name with the following pattern v<digit>.<digit>. 
jobs:
  check-commit:
    runs-on: ubuntu-latest        
    steps:
    - name: :Checkout1
      uses: actions/checkout@v4
    - name: Check "NORUN" commit message
      id: check-commit
      run: |
         if [[ "${{ github.event.head_commit.message }}" == "#NORUN"* ]]; then
         echo "::set-output name=skip_workflow::true"
         else
         echo "::set-output name=skip_workflow::false"
         fi
   
  
  build:
    runs-on: ubuntu-latest
    if: ${{ success() && needs.check-commit.outputs.skip_workflow != 'true' }}
    needs: [check-commit]
    steps:
    - name: Checkout2
      uses: actions/checkout@v2
    - name: Build an image from Dockerfile
      run: |
        docker build -t docker.io/my-organization/my-app:${{ github.sha }} .
   
    - name: Run Trivy vulnerability scanner
      id: ScanResult
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,LOW'
   
    - name: Send Scan message to Slack (Failed)
      if: ${{failure()}} 
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_TITLE: Scan Failed
        SLACK_MESSAGE: 'Failed trivy scan, see uploaded report.'
        SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIF }} 

    
    - name: Send Scan file to Slack (Failed)
      if: ${{failure()}}
      uses: MeilCli/slack-upload-file@v3
      with:
        slack_token: ${{ secrets.SLACK_UPLOAD }}
        channel_id: ${{ secrets.SLACK_CHANNELID }}
        content: ${{ steps.ScanResult.outputs.trivy-report-json }}
        file_type: 'text'
        file_name: 'ScanReport.txt'
        title: 'Scan Report'
  
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.1.2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ravencorax/app:${{ github.sha }}
  
      - id: docker_meta
        uses: docker/metadata-action@v4.4.0
        with:
            images: ravencorax/app:${{ github.sha }}
            tags: type=sha,format=long

      - name: Sign the images with GitHub OIDC Token
        env:
            DIGEST: ${{ steps.build-and-push.outputs.digest }}
            TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: 
           echo "TAGS=${TAGS}"
           echo "DIGEST=${DIGEST}"
           cosign sign --yes "${TAGS}@${DIGEST}"
     
      - name: Sign image with a key
        run: 
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${TAGS}@${DIGEST}"
        env:
          TAGS: ravencorax/app:${{ github.sha }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
     
      - name: Send Scan message to Slack (Succeed)
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: Success
          SLACK_MESSAGE: ' '
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIF }} 
 
    


         
      



       



 
    


         
      



       


